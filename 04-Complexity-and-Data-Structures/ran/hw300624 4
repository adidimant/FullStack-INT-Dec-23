class TreeNode {
    val: number;
    left: TreeNode | null;
    right: TreeNode | null;

    constructor(val: number) {
        this.val = val;
        this.left = null;
        this.right = null;
    }
}

function find(root: TreeNode | null, key: number): TreeNode | null {
    // אם השורש ריק או שהשורש הוא המפתח המבוקש
    if (root === null || root.val === key) {
        return root;
    }

    // אם המפתח המבוקש קטן מהמפתח של השורש, חפש בתת-העץ השמאלי
    if (key < root.val) {
        return find(root.left, key);
    }

    // אם המפתח המבוקש גדול מהמפתח של השורש, חפש בתת-העץ הימני
    return find(root.right, key);
}

function insert(root: TreeNode | null, key: number): TreeNode {
    // אם העץ ריק, צור צומת חדש עם המפתח
    if (root === null) {
        return new TreeNode(key);
    }

    // אם המפתח קטן מהמפתח של השורש, הכנס בתת-העץ השמאלי
    if (key < root.val) {
        root.left = insert(root.left, key);
    } else { // אם המפתח גדול מהמפתח של השורש, הכנס בתת-העץ הימני
        root.right = insert(root.right, key);
    }

    return root;
}

function remove(root: TreeNode | null, key: number): TreeNode | null {
    // בסיס המקרה
    if (root === null) {
        return root;
    }

    // אם המפתח להסרה קטן מהמפתח של השורש, חפש בתת-העץ השמאלי
    if (key < root.val) {
        root.left = remove(root.left, key);
    }
    // אם המפתח להסרה גדול מהמפתח של השורש, חפש בתת-העץ הימני
    else if (key > root.val) {
        root.right = remove(root.right, key);
    }
    // אם המפתח להסרה שווה למפתח של השורש
    else {
        // צומת עם ילד אחד או ללא ילדים
        if (root.left === null) {
            return root.right;
        } else if (root.right === null) {
            return root.left;
        }

        // צומת עם שני ילדים: מצא את המינימום בתת-העץ הימני
        let temp = findMinValueNode(root.right);

        // העתק את תוכן המינימום לצומת זה
        root.val = temp.val;

        // הסר את המינימום בתת-העץ הימני
        root.right = remove(root.right, temp.val);
    }

    return root;
}

function findMinValueNode(node: TreeNode): TreeNode {
    let current = node;

    // מצא את העלה השמאלי ביותר
    while (current.left !== null) {
        current = current.left;
    }

    return current;
}
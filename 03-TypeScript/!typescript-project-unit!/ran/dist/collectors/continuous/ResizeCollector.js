"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeCollector = void 0;
var _Utils = require("../../utils/Utils");
class ResizeCollector {
  data = [];
  constructor(interval, bufferSize) {
    this.interval = interval;
    this.bufferSize = bufferSize;
  }
  getData() {
    return this.data;
  }
  getKey() {
    return 'resize';
  }
  startCollect() {
    try {
      window.addEventListener('resize', this.handleResize);
    } catch (error) {
      console.error('Failed to start resize collection:', error);
    }
  }
  finishCollect() {
    try {
      window.removeEventListener('resize', this.handleResize);
      this.data = [];
    } catch (error) {
      console.error('Error finishing resize collection:', error);
    }
  }
  handleResize = () => {
    try {
      const resizeData = {
        width: window.innerWidth,
        height: window.innerHeight,
        timestamp: Date.now()
      };
      this.data = _Utils.Utils.maintainLastXItems(this.data, this.bufferSize, resizeData);
    } catch (error) {
      console.error('Error handling resize:', error);
    }
  };
}
exports.ResizeCollector = ResizeCollector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVXRpbHMiLCJyZXF1aXJlIiwiUmVzaXplQ29sbGVjdG9yIiwiZGF0YSIsImNvbnN0cnVjdG9yIiwiaW50ZXJ2YWwiLCJidWZmZXJTaXplIiwiZ2V0RGF0YSIsImdldEtleSIsInN0YXJ0Q29sbGVjdCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVSZXNpemUiLCJlcnJvciIsImNvbnNvbGUiLCJmaW5pc2hDb2xsZWN0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlc2l6ZURhdGEiLCJ3aWR0aCIsImlubmVyV2lkdGgiLCJoZWlnaHQiLCJpbm5lckhlaWdodCIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJVdGlscyIsIm1haW50YWluTGFzdFhJdGVtcyIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sbGVjdG9ycy9jb250aW51b3VzL1Jlc2l6ZUNvbGxlY3Rvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250aW51b3VzQ29sbGVjdG9yIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9Db250aW51b3VzQ29sbGVjdG9yJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMvVXRpbHMnO1xuXG5pbnRlcmZhY2UgUmVzaXplRGF0YSB7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFJlc2l6ZUNvbGxlY3RvciBpbXBsZW1lbnRzIENvbnRpbnVvdXNDb2xsZWN0b3I8UmVzaXplRGF0YT4ge1xuICBwdWJsaWMgaW50ZXJ2YWw6IG51bWJlcjtcbiAgcHVibGljIGJ1ZmZlclNpemU6IG51bWJlcjtcbiAgcHJpdmF0ZSBkYXRhOiBSZXNpemVEYXRhW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihpbnRlcnZhbDogbnVtYmVyLCBidWZmZXJTaXplOiBudW1iZXIpIHtcbiAgICB0aGlzLmludGVydmFsID0gaW50ZXJ2YWw7XG4gICAgdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgfVxuXG4gIGdldERhdGEoKTogUmVzaXplRGF0YVtdIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xuICB9XG5cbiAgZ2V0S2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdyZXNpemUnO1xuICB9XG5cbiAgc3RhcnRDb2xsZWN0KCk6IHZvaWQge1xuICAgIHRyeSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc3RhcnQgcmVzaXplIGNvbGxlY3Rpb246JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIGZpbmlzaENvbGxlY3QoKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmluaXNoaW5nIHJlc2l6ZSBjb2xsZWN0aW9uOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVJlc2l6ZSA9ICgpOiB2b2lkID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzaXplRGF0YTogUmVzaXplRGF0YSA9IHtcbiAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICB9O1xuICAgICAgdGhpcy5kYXRhID0gVXRpbHMubWFpbnRhaW5MYXN0WEl0ZW1zKHRoaXMuZGF0YSwgdGhpcy5idWZmZXJTaXplLCByZXNpemVEYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaGFuZGxpbmcgcmVzaXplOicsIGVycm9yKTtcbiAgICB9XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQVFPLE1BQU1DLGVBQWUsQ0FBNEM7RUFHOURDLElBQUksR0FBaUIsRUFBRTtFQUUvQkMsV0FBV0EsQ0FBQ0MsUUFBZ0IsRUFBRUMsVUFBa0IsRUFBRTtJQUNoRCxJQUFJLENBQUNELFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVTtFQUM5QjtFQUVBQyxPQUFPQSxDQUFBLEVBQWlCO0lBQ3RCLE9BQU8sSUFBSSxDQUFDSixJQUFJO0VBQ2xCO0VBRUFLLE1BQU1BLENBQUEsRUFBVztJQUNmLE9BQU8sUUFBUTtFQUNqQjtFQUVBQyxZQUFZQSxDQUFBLEVBQVM7SUFDbkIsSUFBSTtNQUNGQyxNQUFNLENBQUNDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUNDLFlBQVksQ0FBQztJQUN0RCxDQUFDLENBQUMsT0FBT0MsS0FBSyxFQUFFO01BQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLG9DQUFvQyxFQUFFQSxLQUFLLENBQUM7SUFDNUQ7RUFDRjtFQUVBRSxhQUFhQSxDQUFBLEVBQVM7SUFDcEIsSUFBSTtNQUNGTCxNQUFNLENBQUNNLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUNKLFlBQVksQ0FBQztNQUN2RCxJQUFJLENBQUNULElBQUksR0FBRyxFQUFFO0lBQ2hCLENBQUMsQ0FBQyxPQUFPVSxLQUFLLEVBQUU7TUFDZEMsT0FBTyxDQUFDRCxLQUFLLENBQUMsb0NBQW9DLEVBQUVBLEtBQUssQ0FBQztJQUM1RDtFQUNGO0VBRVFELFlBQVksR0FBR0EsQ0FBQSxLQUFZO0lBQ2pDLElBQUk7TUFDRixNQUFNSyxVQUFzQixHQUFHO1FBQzdCQyxLQUFLLEVBQUVSLE1BQU0sQ0FBQ1MsVUFBVTtRQUN4QkMsTUFBTSxFQUFFVixNQUFNLENBQUNXLFdBQVc7UUFDMUJDLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxHQUFHLENBQUM7TUFDdEIsQ0FBQztNQUNELElBQUksQ0FBQ3JCLElBQUksR0FBR3NCLFlBQUssQ0FBQ0Msa0JBQWtCLENBQUMsSUFBSSxDQUFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQ0csVUFBVSxFQUFFVyxVQUFVLENBQUM7SUFDOUUsQ0FBQyxDQUFDLE9BQU9KLEtBQUssRUFBRTtNQUNkQyxPQUFPLENBQUNELEtBQUssQ0FBQyx3QkFBd0IsRUFBRUEsS0FBSyxDQUFDO0lBQ2hEO0VBQ0YsQ0FBQztBQUNIO0FBQUNjLE9BQUEsQ0FBQXpCLGVBQUEsR0FBQUEsZUFBQSIsImlnbm9yZUxpc3QiOltdfQ==
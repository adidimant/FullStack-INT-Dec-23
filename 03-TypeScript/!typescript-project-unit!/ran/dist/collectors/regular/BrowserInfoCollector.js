"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BrowserInfoCollector = void 0;
class BrowserInfoCollector {
  data = null;
  constructor(interval) {
    this.interval = interval;
  }
  getData() {
    return this.data;
  }
  getKey() {
    return 'browserInfo';
  }
  startCollect() {
    try {
      this.collectData();
      setInterval(() => {
        try {
          this.collectData();
        } catch (error) {
          console.error('Error collecting browser info:', error);
          this.data = null;
        }
      }, this.interval);
    } catch (error) {
      console.error('Failed to start browser info collection:', error);
    }
  }
  finishCollect() {
    this.data = null;
  }
  collectData() {
    try {
      const ua = navigator.userAgent;
      let tem;
      let M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
      if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        this.data = 'IE ' + (tem[1] || '');
      } else if (M[1] === 'Chrome') {
        tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
        if (tem != null) this.data = tem.slice(1).join(' ').replace('OPR', 'Opera');
      } else {
        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
        if ((tem = ua.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
        this.data = M.join(' ');
      }
    } catch (error) {
      console.error('Error getting browser info:', error);
      this.data = null;
    }
  }
}
exports.BrowserInfoCollector = BrowserInfoCollector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCcm93c2VySW5mb0NvbGxlY3RvciIsImRhdGEiLCJjb25zdHJ1Y3RvciIsImludGVydmFsIiwiZ2V0RGF0YSIsImdldEtleSIsInN0YXJ0Q29sbGVjdCIsImNvbGxlY3REYXRhIiwic2V0SW50ZXJ2YWwiLCJlcnJvciIsImNvbnNvbGUiLCJmaW5pc2hDb2xsZWN0IiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0ZW0iLCJNIiwibWF0Y2giLCJ0ZXN0IiwiZXhlYyIsInNsaWNlIiwiam9pbiIsInJlcGxhY2UiLCJhcHBOYW1lIiwiYXBwVmVyc2lvbiIsInNwbGljZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sbGVjdG9ycy9yZWd1bGFyL0Jyb3dzZXJJbmZvQ29sbGVjdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbGxlY3RvciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvQ29sbGVjdG9yJztcblxuZXhwb3J0IGNsYXNzIEJyb3dzZXJJbmZvQ29sbGVjdG9yIGltcGxlbWVudHMgQ29sbGVjdG9yPHN0cmluZz4ge1xuICBwdWJsaWMgaW50ZXJ2YWw6IG51bWJlcjtcbiAgcHJpdmF0ZSBkYXRhOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihpbnRlcnZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5pbnRlcnZhbCA9IGludGVydmFsO1xuICB9XG5cbiAgZ2V0RGF0YSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xuICB9XG5cbiAgZ2V0S2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdicm93c2VySW5mbyc7XG4gIH1cblxuICBzdGFydENvbGxlY3QoKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuY29sbGVjdERhdGEoKTtcbiAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNvbGxlY3REYXRhKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY29sbGVjdGluZyBicm93c2VyIGluZm86JywgZXJyb3IpO1xuICAgICAgICAgIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMuaW50ZXJ2YWwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc3RhcnQgYnJvd3NlciBpbmZvIGNvbGxlY3Rpb246JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIGZpbmlzaENvbGxlY3QoKTogdm9pZCB7XG4gICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgY29sbGVjdERhdGEoKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgIGxldCB0ZW07XG4gICAgICBsZXQgTSA9IHVhLm1hdGNoKC8ob3BlcmF8Y2hyb21lfHNhZmFyaXxmaXJlZm94fG1zaWV8dHJpZGVudCg/PVxcLykpXFwvP1xccyooXFxkKykvaSkgfHwgW107XG4gICAgICBpZiAoL3RyaWRlbnQvaS50ZXN0KE1bMV0pKSB7XG4gICAgICAgIHRlbSA9IC9cXGJydlsgOl0rKFxcZCspL2cuZXhlYyh1YSkgfHwgW107XG4gICAgICAgIHRoaXMuZGF0YSA9ICdJRSAnICsgKHRlbVsxXSB8fCAnJyk7XG4gICAgICB9IGVsc2UgaWYgKE1bMV0gPT09ICdDaHJvbWUnKSB7XG4gICAgICAgIHRlbSA9IHVhLm1hdGNoKC9cXGIoT1BSfEVkZ2UpXFwvKFxcZCspLyk7XG4gICAgICAgIGlmICh0ZW0gIT0gbnVsbCkgdGhpcy5kYXRhID0gdGVtLnNsaWNlKDEpLmpvaW4oJyAnKS5yZXBsYWNlKCdPUFInLCAnT3BlcmEnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE0gPSBNWzJdID8gW01bMV0sIE1bMl1dIDogW25hdmlnYXRvci5hcHBOYW1lLCBuYXZpZ2F0b3IuYXBwVmVyc2lvbiwgJy0/J107XG4gICAgICAgIGlmICgodGVtID0gdWEubWF0Y2goL3ZlcnNpb25cXC8oXFxkKykvaSkpICE9IG51bGwpIE0uc3BsaWNlKDEsIDEsIHRlbVsxXSk7XG4gICAgICAgIHRoaXMuZGF0YSA9IE0uam9pbignICcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGJyb3dzZXIgaW5mbzonLCBlcnJvcik7XG4gICAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVPLE1BQU1BLG9CQUFvQixDQUE4QjtFQUVyREMsSUFBSSxHQUFrQixJQUFJO0VBRWxDQyxXQUFXQSxDQUFDQyxRQUFnQixFQUFFO0lBQzVCLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRO0VBQzFCO0VBRUFDLE9BQU9BLENBQUEsRUFBa0I7SUFDdkIsT0FBTyxJQUFJLENBQUNILElBQUk7RUFDbEI7RUFFQUksTUFBTUEsQ0FBQSxFQUFXO0lBQ2YsT0FBTyxhQUFhO0VBQ3RCO0VBRUFDLFlBQVlBLENBQUEsRUFBUztJQUNuQixJQUFJO01BQ0YsSUFBSSxDQUFDQyxXQUFXLENBQUMsQ0FBQztNQUNsQkMsV0FBVyxDQUFDLE1BQU07UUFDaEIsSUFBSTtVQUNGLElBQUksQ0FBQ0QsV0FBVyxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLE9BQU9FLEtBQUssRUFBRTtVQUNkQyxPQUFPLENBQUNELEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRUEsS0FBSyxDQUFDO1VBQ3RELElBQUksQ0FBQ1IsSUFBSSxHQUFHLElBQUk7UUFDbEI7TUFDRixDQUFDLEVBQUUsSUFBSSxDQUFDRSxRQUFRLENBQUM7SUFDbkIsQ0FBQyxDQUFDLE9BQU9NLEtBQUssRUFBRTtNQUNkQyxPQUFPLENBQUNELEtBQUssQ0FBQywwQ0FBMEMsRUFBRUEsS0FBSyxDQUFDO0lBQ2xFO0VBQ0Y7RUFFQUUsYUFBYUEsQ0FBQSxFQUFTO0lBQ3BCLElBQUksQ0FBQ1YsSUFBSSxHQUFHLElBQUk7RUFDbEI7RUFFUU0sV0FBV0EsQ0FBQSxFQUFTO0lBQzFCLElBQUk7TUFDRixNQUFNSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0MsU0FBUztNQUM5QixJQUFJQyxHQUFHO01BQ1AsSUFBSUMsQ0FBQyxHQUFHSixFQUFFLENBQUNLLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxJQUFJLEVBQUU7TUFDdEYsSUFBSSxVQUFVLENBQUNDLElBQUksQ0FBQ0YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDekJELEdBQUcsR0FBRyxpQkFBaUIsQ0FBQ0ksSUFBSSxDQUFDUCxFQUFFLENBQUMsSUFBSSxFQUFFO1FBQ3RDLElBQUksQ0FBQ1gsSUFBSSxHQUFHLEtBQUssSUFBSWMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztNQUNwQyxDQUFDLE1BQU0sSUFBSUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUM1QkQsR0FBRyxHQUFHSCxFQUFFLENBQUNLLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztRQUNyQyxJQUFJRixHQUFHLElBQUksSUFBSSxFQUFFLElBQUksQ0FBQ2QsSUFBSSxHQUFHYyxHQUFHLENBQUNLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQztNQUM3RSxDQUFDLE1BQU07UUFDTE4sQ0FBQyxHQUFHQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDSCxTQUFTLENBQUNVLE9BQU8sRUFBRVYsU0FBUyxDQUFDVyxVQUFVLEVBQUUsSUFBSSxDQUFDO1FBQ3pFLElBQUksQ0FBQ1QsR0FBRyxHQUFHSCxFQUFFLENBQUNLLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLElBQUksRUFBRUQsQ0FBQyxDQUFDUyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRVYsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQ2QsSUFBSSxHQUFHZSxDQUFDLENBQUNLLElBQUksQ0FBQyxHQUFHLENBQUM7TUFDekI7SUFDRixDQUFDLENBQUMsT0FBT1osS0FBSyxFQUFFO01BQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLDZCQUE2QixFQUFFQSxLQUFLLENBQUM7TUFDbkQsSUFBSSxDQUFDUixJQUFJLEdBQUcsSUFBSTtJQUNsQjtFQUNGO0FBQ0Y7QUFBQ3lCLE9BQUEsQ0FBQTFCLG9CQUFBLEdBQUFBLG9CQUFBIiwiaWdub3JlTGlzdCI6W119
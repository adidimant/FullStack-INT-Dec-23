"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AcmeCyberSDK = void 0;
var _EventsManager = require("./managers/EventsManager");
var _ScreenWidthCollector = require("./collectors/regular/ScreenWidthCollector");
var _ScreenHeightCollector = require("./collectors/regular/ScreenHeightCollector");
var _LanguageCollector = require("./collectors/regular/LanguageCollector");
var _UserAgentCollector = require("./collectors/regular/UserAgentCollector");
var _TimezoneCollector = require("./collectors/regular/TimezoneCollector");
var _CookiesEnabledCollector = require("./collectors/regular/CookiesEnabledCollector");
var _JavaScriptEnabledCollector = require("./collectors/regular/JavaScriptEnabledCollector");
var _OnlineStatusCollector = require("./collectors/regular/OnlineStatusCollector");
var _ReferrerCollector = require("./collectors/regular/ReferrerCollector");
var _LocalStorageAvailableCollector = require("./collectors/regular/LocalStorageAvailableCollector");
var _BrowserInfoCollector = require("./collectors/regular/BrowserInfoCollector");
var _PlatformCollector = require("./collectors/regular/PlatformCollector");
var _HardwareConcurrencyCollector = require("./collectors/regular/HardwareConcurrencyCollector");
var _PluginsCollector = require("./collectors/regular/PluginsCollector");
var _DoNotTrackCollector = require("./collectors/regular/DoNotTrackCollector");
var _ColorDepthCollector = require("./collectors/regular/ColorDepthCollector");
var _TouchSupportCollector = require("./collectors/regular/TouchSupportCollector");
var _CurrentUrlCollector = require("./collectors/regular/CurrentUrlCollector");
var _HistoryLengthCollector = require("./collectors/regular/HistoryLengthCollector");
var _WindowSizeCollector = require("./collectors/regular/WindowSizeCollector");
var _ScreenOrientationCollector = require("./collectors/regular/ScreenOrientationCollector");
var _VideoSupportCollector = require("./collectors/regular/VideoSupportCollector");
var _MouseMoveCollector = require("./collectors/continuous/MouseMoveCollector");
var _KeyboardPressCollector = require("./collectors/continuous/KeyboardPressCollector");
var _ClicksCollector = require("./collectors/continuous/ClicksCollector");
var _ScrollCollector = require("./collectors/continuous/ScrollCollector");
var _ResizeCollector = require("./collectors/continuous/ResizeCollector");
var _VisibilityChangeCollector = require("./collectors/continuous/VisibilityChangeCollector");
class AcmeCyberSDK {
  collectors = [];
  constructor() {
    this.eventsManager = _EventsManager.EventsManager.getInstance();
  }
  async initializeCollectors() {
    const config = await this.eventsManager.getConfig();
    const regularCollectors = [_ScreenWidthCollector.ScreenWidthCollector, _ScreenHeightCollector.ScreenHeightCollector, _LanguageCollector.LanguageCollector, _UserAgentCollector.UserAgentCollector, _TimezoneCollector.TimezoneCollector, _CookiesEnabledCollector.CookiesEnabledCollector, _JavaScriptEnabledCollector.JavaScriptEnabledCollector, _OnlineStatusCollector.OnlineStatusCollector, _ReferrerCollector.ReferrerCollector, _LocalStorageAvailableCollector.LocalStorageAvailableCollector, _BrowserInfoCollector.BrowserInfoCollector, _PlatformCollector.PlatformCollector, _HardwareConcurrencyCollector.HardwareConcurrencyCollector, _PluginsCollector.PluginsCollector, _DoNotTrackCollector.DoNotTrackCollector, _ColorDepthCollector.ColorDepthCollector, _TouchSupportCollector.TouchSupportCollector, _CurrentUrlCollector.CurrentUrlCollector, _HistoryLengthCollector.HistoryLengthCollector, _WindowSizeCollector.WindowSizeCollector, _ScreenOrientationCollector.ScreenOrientationCollector, _VideoSupportCollector.VideoSupportCollector];
    const continuousCollectors = [_MouseMoveCollector.MouseMoveCollector, _KeyboardPressCollector.KeyboardPressCollector, _ClicksCollector.ClicksCollector, _ScrollCollector.ScrollCollector, _ResizeCollector.ResizeCollector, _VisibilityChangeCollector.VisibilityChangeCollector];
    this.collectors = [...regularCollectors.map(CollectorClass => {
      try {
        return new CollectorClass(config.COLLECTORS_INTERVAL);
      } catch (error) {
        console.error(`Failed to initialize ${CollectorClass.name}:`, error);
        return null;
      }
    }), ...continuousCollectors.map(CollectorClass => {
      try {
        return new CollectorClass(config.COLLECTORS_INTERVAL, config.DEFAULT_BUFFER_CONTINUOUS_COLLECTORS);
      } catch (error) {
        console.error(`Failed to initialize ${CollectorClass.name}:`, error);
        return null;
      }
    })].filter(collector => collector !== null);
  }
  async start() {
    const config = await this.eventsManager.getConfig();
    if (config.SDK_ENABLED) {
      await this.initializeCollectors();
      this.collectors.forEach(collector => {
        try {
          collector.startCollect();
        } catch (error) {
          console.error(`Failed to start ${collector.getKey()} collector:`, error);
        }
      });
      this.scheduleDataUpdate();
    }
  }
  async scheduleDataUpdate() {
    const config = await this.eventsManager.getConfig();
    setInterval(async () => {
      const data = {};
      for (const collector of this.collectors) {
        try {
          data[collector.getKey()] = collector.getData();
        } catch (error) {
          console.error(`Error collecting data from ${collector.getKey()}:`, error);
          data[collector.getKey()] = null;
        }
      }
      try {
        await this.eventsManager.updateData(data);
      } catch (error) {
        console.error('Failed to update data:', error);
      }
    }, config.COLLECTORS_INTERVAL);
  }
}
exports.AcmeCyberSDK = AcmeCyberSDK;
document.addEventListener('acme-sdk-loaded', async () => {
  const sdk = new AcmeCyberSDK();
  await sdk.start();
});
document.dispatchEvent(new CustomEvent('acme-sdk-loaded'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,